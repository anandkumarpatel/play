/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WinIndexRouteImport } from './routes/win/index'
import { Route as SolitaireIndexRouteImport } from './routes/solitaire/index'
import { Route as NumberIndexRouteImport } from './routes/number/index'
import { Route as MathIndexRouteImport } from './routes/math/index'
import { Route as EmojiIndexRouteImport } from './routes/emoji/index'
import { Route as ColorIndexRouteImport } from './routes/color/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WinIndexRoute = WinIndexRouteImport.update({
  id: '/win/',
  path: '/win/',
  getParentRoute: () => rootRouteImport,
} as any)
const SolitaireIndexRoute = SolitaireIndexRouteImport.update({
  id: '/solitaire/',
  path: '/solitaire/',
  getParentRoute: () => rootRouteImport,
} as any)
const NumberIndexRoute = NumberIndexRouteImport.update({
  id: '/number/',
  path: '/number/',
  getParentRoute: () => rootRouteImport,
} as any)
const MathIndexRoute = MathIndexRouteImport.update({
  id: '/math/',
  path: '/math/',
  getParentRoute: () => rootRouteImport,
} as any)
const EmojiIndexRoute = EmojiIndexRouteImport.update({
  id: '/emoji/',
  path: '/emoji/',
  getParentRoute: () => rootRouteImport,
} as any)
const ColorIndexRoute = ColorIndexRouteImport.update({
  id: '/color/',
  path: '/color/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/color': typeof ColorIndexRoute
  '/emoji': typeof EmojiIndexRoute
  '/math': typeof MathIndexRoute
  '/number': typeof NumberIndexRoute
  '/solitaire': typeof SolitaireIndexRoute
  '/win': typeof WinIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/color': typeof ColorIndexRoute
  '/emoji': typeof EmojiIndexRoute
  '/math': typeof MathIndexRoute
  '/number': typeof NumberIndexRoute
  '/solitaire': typeof SolitaireIndexRoute
  '/win': typeof WinIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/color/': typeof ColorIndexRoute
  '/emoji/': typeof EmojiIndexRoute
  '/math/': typeof MathIndexRoute
  '/number/': typeof NumberIndexRoute
  '/solitaire/': typeof SolitaireIndexRoute
  '/win/': typeof WinIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/color'
    | '/emoji'
    | '/math'
    | '/number'
    | '/solitaire'
    | '/win'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/color' | '/emoji' | '/math' | '/number' | '/solitaire' | '/win'
  id:
    | '__root__'
    | '/'
    | '/color/'
    | '/emoji/'
    | '/math/'
    | '/number/'
    | '/solitaire/'
    | '/win/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ColorIndexRoute: typeof ColorIndexRoute
  EmojiIndexRoute: typeof EmojiIndexRoute
  MathIndexRoute: typeof MathIndexRoute
  NumberIndexRoute: typeof NumberIndexRoute
  SolitaireIndexRoute: typeof SolitaireIndexRoute
  WinIndexRoute: typeof WinIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/win/': {
      id: '/win/'
      path: '/win'
      fullPath: '/win'
      preLoaderRoute: typeof WinIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/solitaire/': {
      id: '/solitaire/'
      path: '/solitaire'
      fullPath: '/solitaire'
      preLoaderRoute: typeof SolitaireIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/number/': {
      id: '/number/'
      path: '/number'
      fullPath: '/number'
      preLoaderRoute: typeof NumberIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/math/': {
      id: '/math/'
      path: '/math'
      fullPath: '/math'
      preLoaderRoute: typeof MathIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/emoji/': {
      id: '/emoji/'
      path: '/emoji'
      fullPath: '/emoji'
      preLoaderRoute: typeof EmojiIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/color/': {
      id: '/color/'
      path: '/color'
      fullPath: '/color'
      preLoaderRoute: typeof ColorIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ColorIndexRoute: ColorIndexRoute,
  EmojiIndexRoute: EmojiIndexRoute,
  MathIndexRoute: MathIndexRoute,
  NumberIndexRoute: NumberIndexRoute,
  SolitaireIndexRoute: SolitaireIndexRoute,
  WinIndexRoute: WinIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
